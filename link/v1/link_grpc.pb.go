// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: link/v1/link.proto

package linkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LinkService_CreateShortLink_FullMethodName = "/link.v1.LinkService/CreateShortLink"
	LinkService_GetShortLink_FullMethodName    = "/link.v1.LinkService/GetShortLink"
	LinkService_RedirectLink_FullMethodName    = "/link.v1.LinkService/RedirectLink"
	LinkService_DeleteShortLink_FullMethodName = "/link.v1.LinkService/DeleteShortLink"
	LinkService_ListShortLinks_FullMethodName  = "/link.v1.LinkService/ListShortLinks"
	LinkService_GetLinkStats_FullMethodName    = "/link.v1.LinkService/GetLinkStats"
	LinkService_GetLinkClicks_FullMethodName   = "/link.v1.LinkService/GetLinkClicks"
)

// LinkServiceClient is the client API for LinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkServiceClient interface {
	// Создание короткой ссылки
	CreateShortLink(ctx context.Context, in *CreateShortLinkRequest, opts ...grpc.CallOption) (*ShortLinkResponse, error)
	// Получение короткой ссылки по id
	GetShortLink(ctx context.Context, in *GetShortLinkRequest, opts ...grpc.CallOption) (*ShortLinkResponse, error)
	// Публичный редирект (анонимный) — возвращает оригинальный URL; gateway преобразует в HTTP 302
	RedirectLink(ctx context.Context, in *RedirectLinkRequest, opts ...grpc.CallOption) (*RedirectLinkResponse, error)
	// Удаление короткой ссылки
	DeleteShortLink(ctx context.Context, in *DeleteShortLinkRequest, opts ...grpc.CallOption) (*DeleteShortLinkResponse, error)
	// Список ссылок текущего пользователя
	ListShortLinks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListShortLinksResponse, error)
	// Статистика по ссылке
	GetLinkStats(ctx context.Context, in *GetLinkStatsRequest, opts ...grpc.CallOption) (*LinkStatsResponse, error)
	// Сырые клики по ссылке
	GetLinkClicks(ctx context.Context, in *GetLinkClicksRequest, opts ...grpc.CallOption) (*GetLinkClicksResponse, error)
}

type linkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkServiceClient(cc grpc.ClientConnInterface) LinkServiceClient {
	return &linkServiceClient{cc}
}

func (c *linkServiceClient) CreateShortLink(ctx context.Context, in *CreateShortLinkRequest, opts ...grpc.CallOption) (*ShortLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortLinkResponse)
	err := c.cc.Invoke(ctx, LinkService_CreateShortLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) GetShortLink(ctx context.Context, in *GetShortLinkRequest, opts ...grpc.CallOption) (*ShortLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortLinkResponse)
	err := c.cc.Invoke(ctx, LinkService_GetShortLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) RedirectLink(ctx context.Context, in *RedirectLinkRequest, opts ...grpc.CallOption) (*RedirectLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedirectLinkResponse)
	err := c.cc.Invoke(ctx, LinkService_RedirectLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) DeleteShortLink(ctx context.Context, in *DeleteShortLinkRequest, opts ...grpc.CallOption) (*DeleteShortLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShortLinkResponse)
	err := c.cc.Invoke(ctx, LinkService_DeleteShortLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) ListShortLinks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListShortLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShortLinksResponse)
	err := c.cc.Invoke(ctx, LinkService_ListShortLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) GetLinkStats(ctx context.Context, in *GetLinkStatsRequest, opts ...grpc.CallOption) (*LinkStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkStatsResponse)
	err := c.cc.Invoke(ctx, LinkService_GetLinkStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) GetLinkClicks(ctx context.Context, in *GetLinkClicksRequest, opts ...grpc.CallOption) (*GetLinkClicksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLinkClicksResponse)
	err := c.cc.Invoke(ctx, LinkService_GetLinkClicks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkServiceServer is the server API for LinkService service.
// All implementations must embed UnimplementedLinkServiceServer
// for forward compatibility.
type LinkServiceServer interface {
	// Создание короткой ссылки
	CreateShortLink(context.Context, *CreateShortLinkRequest) (*ShortLinkResponse, error)
	// Получение короткой ссылки по id
	GetShortLink(context.Context, *GetShortLinkRequest) (*ShortLinkResponse, error)
	// Публичный редирект (анонимный) — возвращает оригинальный URL; gateway преобразует в HTTP 302
	RedirectLink(context.Context, *RedirectLinkRequest) (*RedirectLinkResponse, error)
	// Удаление короткой ссылки
	DeleteShortLink(context.Context, *DeleteShortLinkRequest) (*DeleteShortLinkResponse, error)
	// Список ссылок текущего пользователя
	ListShortLinks(context.Context, *emptypb.Empty) (*ListShortLinksResponse, error)
	// Статистика по ссылке
	GetLinkStats(context.Context, *GetLinkStatsRequest) (*LinkStatsResponse, error)
	// Сырые клики по ссылке
	GetLinkClicks(context.Context, *GetLinkClicksRequest) (*GetLinkClicksResponse, error)
	mustEmbedUnimplementedLinkServiceServer()
}

// UnimplementedLinkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinkServiceServer struct{}

func (UnimplementedLinkServiceServer) CreateShortLink(context.Context, *CreateShortLinkRequest) (*ShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortLink not implemented")
}
func (UnimplementedLinkServiceServer) GetShortLink(context.Context, *GetShortLinkRequest) (*ShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortLink not implemented")
}
func (UnimplementedLinkServiceServer) RedirectLink(context.Context, *RedirectLinkRequest) (*RedirectLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedirectLink not implemented")
}
func (UnimplementedLinkServiceServer) DeleteShortLink(context.Context, *DeleteShortLinkRequest) (*DeleteShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortLink not implemented")
}
func (UnimplementedLinkServiceServer) ListShortLinks(context.Context, *emptypb.Empty) (*ListShortLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShortLinks not implemented")
}
func (UnimplementedLinkServiceServer) GetLinkStats(context.Context, *GetLinkStatsRequest) (*LinkStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkStats not implemented")
}
func (UnimplementedLinkServiceServer) GetLinkClicks(context.Context, *GetLinkClicksRequest) (*GetLinkClicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkClicks not implemented")
}
func (UnimplementedLinkServiceServer) mustEmbedUnimplementedLinkServiceServer() {}
func (UnimplementedLinkServiceServer) testEmbeddedByValue()                     {}

// UnsafeLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkServiceServer will
// result in compilation errors.
type UnsafeLinkServiceServer interface {
	mustEmbedUnimplementedLinkServiceServer()
}

func RegisterLinkServiceServer(s grpc.ServiceRegistrar, srv LinkServiceServer) {
	// If the following call pancis, it indicates UnimplementedLinkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LinkService_ServiceDesc, srv)
}

func _LinkService_CreateShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).CreateShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_CreateShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).CreateShortLink(ctx, req.(*CreateShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_GetShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).GetShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_GetShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).GetShortLink(ctx, req.(*GetShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_RedirectLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).RedirectLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_RedirectLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).RedirectLink(ctx, req.(*RedirectLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_DeleteShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).DeleteShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_DeleteShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).DeleteShortLink(ctx, req.(*DeleteShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_ListShortLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).ListShortLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_ListShortLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).ListShortLinks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_GetLinkStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).GetLinkStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_GetLinkStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).GetLinkStats(ctx, req.(*GetLinkStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_GetLinkClicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkClicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).GetLinkClicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_GetLinkClicks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).GetLinkClicks(ctx, req.(*GetLinkClicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkService_ServiceDesc is the grpc.ServiceDesc for LinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "link.v1.LinkService",
	HandlerType: (*LinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortLink",
			Handler:    _LinkService_CreateShortLink_Handler,
		},
		{
			MethodName: "GetShortLink",
			Handler:    _LinkService_GetShortLink_Handler,
		},
		{
			MethodName: "RedirectLink",
			Handler:    _LinkService_RedirectLink_Handler,
		},
		{
			MethodName: "DeleteShortLink",
			Handler:    _LinkService_DeleteShortLink_Handler,
		},
		{
			MethodName: "ListShortLinks",
			Handler:    _LinkService_ListShortLinks_Handler,
		},
		{
			MethodName: "GetLinkStats",
			Handler:    _LinkService_GetLinkStats_Handler,
		},
		{
			MethodName: "GetLinkClicks",
			Handler:    _LinkService_GetLinkClicks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "link/v1/link.proto",
}
