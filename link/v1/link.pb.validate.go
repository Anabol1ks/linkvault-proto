// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: link/v1/link.proto

package linkv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _link_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateShortLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortLinkRequestMultiError, or nil if none found.
func (m *CreateShortLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOriginalUrl()); l < 5 || l > 2048 {
		err := CreateShortLinkRequestValidationError{
			field:  "OriginalUrl",
			reason: "value length must be between 5 and 2048 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetOriginalUrl()); err != nil {
		err = CreateShortLinkRequestValidationError{
			field:  "OriginalUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreateShortLinkRequestValidationError{
			field:  "OriginalUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpireAfter()) > 16 {
		err := CreateShortLinkRequestValidationError{
			field:  "ExpireAfter",
			reason: "value length must be at most 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateShortLinkRequest_ExpireAfter_Pattern.MatchString(m.GetExpireAfter()) {
		err := CreateShortLinkRequestValidationError{
			field:  "ExpireAfter",
			reason: "value does not match regex pattern \"^[0-9]+[smhdw]$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateShortLinkRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateShortLinkRequestMultiError(errors)
	}

	return nil
}

func (m *CreateShortLinkRequest) _validateUuid(uuid string) error {
	if matched := _link_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateShortLinkRequestMultiError is an error wrapping multiple validation
// errors returned by CreateShortLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShortLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortLinkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortLinkRequestMultiError) AllErrors() []error { return m }

// CreateShortLinkRequestValidationError is the validation error returned by
// CreateShortLinkRequest.Validate if the designated constraints aren't met.
type CreateShortLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortLinkRequestValidationError) ErrorName() string {
	return "CreateShortLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortLinkRequestValidationError{}

var _CreateShortLinkRequest_ExpireAfter_Pattern = regexp.MustCompile("^[0-9]+[smhdw]$")

// Validate checks the field values on ShortLinkResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShortLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortLinkResponseMultiError, or nil if none found.
func (m *ShortLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ShortLinkResponseValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetShortUrl()); err != nil {
		err = ShortLinkResponseValidationError{
			field:  "ShortUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ShortLinkResponseValidationError{
			field:  "ShortUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetOriginalUrl()); err != nil {
		err = ShortLinkResponseValidationError{
			field:  "OriginalUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ShortLinkResponseValidationError{
			field:  "OriginalUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetShortCode()); l < 4 || l > 32 {
		err := ShortLinkResponseValidationError{
			field:  "ShortCode",
			reason: "value length must be between 4 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ShortLinkResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ExpireAt

	// no validation rules for IsActive

	if len(errors) > 0 {
		return ShortLinkResponseMultiError(errors)
	}

	return nil
}

func (m *ShortLinkResponse) _validateUuid(uuid string) error {
	if matched := _link_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ShortLinkResponseMultiError is an error wrapping multiple validation errors
// returned by ShortLinkResponse.ValidateAll() if the designated constraints
// aren't met.
type ShortLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortLinkResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortLinkResponseMultiError) AllErrors() []error { return m }

// ShortLinkResponseValidationError is the validation error returned by
// ShortLinkResponse.Validate if the designated constraints aren't met.
type ShortLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortLinkResponseValidationError) ErrorName() string {
	return "ShortLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShortLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortLinkResponseValidationError{}

// Validate checks the field values on GetShortLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShortLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShortLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShortLinkRequestMultiError, or nil if none found.
func (m *GetShortLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShortLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetShortLinkRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetShortLinkRequestMultiError(errors)
	}

	return nil
}

func (m *GetShortLinkRequest) _validateUuid(uuid string) error {
	if matched := _link_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetShortLinkRequestMultiError is an error wrapping multiple validation
// errors returned by GetShortLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShortLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShortLinkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShortLinkRequestMultiError) AllErrors() []error { return m }

// GetShortLinkRequestValidationError is the validation error returned by
// GetShortLinkRequest.Validate if the designated constraints aren't met.
type GetShortLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShortLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShortLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShortLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShortLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShortLinkRequestValidationError) ErrorName() string {
	return "GetShortLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShortLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShortLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShortLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShortLinkRequestValidationError{}

// Validate checks the field values on RedirectLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedirectLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedirectLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedirectLinkRequestMultiError, or nil if none found.
func (m *RedirectLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RedirectLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetShortCode()); l < 4 || l > 32 {
		err := RedirectLinkRequestValidationError{
			field:  "ShortCode",
			reason: "value length must be between 4 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RedirectLinkRequestMultiError(errors)
	}

	return nil
}

// RedirectLinkRequestMultiError is an error wrapping multiple validation
// errors returned by RedirectLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type RedirectLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedirectLinkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedirectLinkRequestMultiError) AllErrors() []error { return m }

// RedirectLinkRequestValidationError is the validation error returned by
// RedirectLinkRequest.Validate if the designated constraints aren't met.
type RedirectLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectLinkRequestValidationError) ErrorName() string {
	return "RedirectLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RedirectLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirectLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectLinkRequestValidationError{}

// Validate checks the field values on RedirectLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedirectLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedirectLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedirectLinkResponseMultiError, or nil if none found.
func (m *RedirectLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RedirectLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetOriginalUrl()); err != nil {
		err = RedirectLinkResponseValidationError{
			field:  "OriginalUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := RedirectLinkResponseValidationError{
			field:  "OriginalUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RedirectLinkResponseMultiError(errors)
	}

	return nil
}

// RedirectLinkResponseMultiError is an error wrapping multiple validation
// errors returned by RedirectLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type RedirectLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedirectLinkResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedirectLinkResponseMultiError) AllErrors() []error { return m }

// RedirectLinkResponseValidationError is the validation error returned by
// RedirectLinkResponse.Validate if the designated constraints aren't met.
type RedirectLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectLinkResponseValidationError) ErrorName() string {
	return "RedirectLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RedirectLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirectLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectLinkResponseValidationError{}

// Validate checks the field values on DeleteShortLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShortLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShortLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShortLinkRequestMultiError, or nil if none found.
func (m *DeleteShortLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShortLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteShortLinkRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteShortLinkRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteShortLinkRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteShortLinkRequest) _validateUuid(uuid string) error {
	if matched := _link_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteShortLinkRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteShortLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteShortLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShortLinkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShortLinkRequestMultiError) AllErrors() []error { return m }

// DeleteShortLinkRequestValidationError is the validation error returned by
// DeleteShortLinkRequest.Validate if the designated constraints aren't met.
type DeleteShortLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShortLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShortLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShortLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShortLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShortLinkRequestValidationError) ErrorName() string {
	return "DeleteShortLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShortLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShortLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShortLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShortLinkRequestValidationError{}

// Validate checks the field values on DeleteShortLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShortLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShortLinkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShortLinkResponseMultiError, or nil if none found.
func (m *DeleteShortLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShortLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMessage()) > 256 {
		err := DeleteShortLinkResponseValidationError{
			field:  "Message",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteShortLinkResponseMultiError(errors)
	}

	return nil
}

// DeleteShortLinkResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteShortLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteShortLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShortLinkResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShortLinkResponseMultiError) AllErrors() []error { return m }

// DeleteShortLinkResponseValidationError is the validation error returned by
// DeleteShortLinkResponse.Validate if the designated constraints aren't met.
type DeleteShortLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShortLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShortLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShortLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShortLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShortLinkResponseValidationError) ErrorName() string {
	return "DeleteShortLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShortLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShortLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShortLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShortLinkResponseValidationError{}

// Validate checks the field values on ListShortLinksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShortLinksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShortLinksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShortLinksRequestMultiError, or nil if none found.
func (m *ListShortLinksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShortLinksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ListShortLinksRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListShortLinksRequestMultiError(errors)
	}

	return nil
}

func (m *ListShortLinksRequest) _validateUuid(uuid string) error {
	if matched := _link_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListShortLinksRequestMultiError is an error wrapping multiple validation
// errors returned by ListShortLinksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListShortLinksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShortLinksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShortLinksRequestMultiError) AllErrors() []error { return m }

// ListShortLinksRequestValidationError is the validation error returned by
// ListShortLinksRequest.Validate if the designated constraints aren't met.
type ListShortLinksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShortLinksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShortLinksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShortLinksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShortLinksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShortLinksRequestValidationError) ErrorName() string {
	return "ListShortLinksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListShortLinksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShortLinksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShortLinksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShortLinksRequestValidationError{}

// Validate checks the field values on ListShortLinksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShortLinksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShortLinksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShortLinksResponseMultiError, or nil if none found.
func (m *ListShortLinksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShortLinksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListShortLinksResponseValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListShortLinksResponseValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShortLinksResponseValidationError{
					field:  fmt.Sprintf("Links[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListShortLinksResponseMultiError(errors)
	}

	return nil
}

// ListShortLinksResponseMultiError is an error wrapping multiple validation
// errors returned by ListShortLinksResponse.ValidateAll() if the designated
// constraints aren't met.
type ListShortLinksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShortLinksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShortLinksResponseMultiError) AllErrors() []error { return m }

// ListShortLinksResponseValidationError is the validation error returned by
// ListShortLinksResponse.Validate if the designated constraints aren't met.
type ListShortLinksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShortLinksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShortLinksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShortLinksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShortLinksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShortLinksResponseValidationError) ErrorName() string {
	return "ListShortLinksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListShortLinksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShortLinksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShortLinksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShortLinksResponseValidationError{}

// Validate checks the field values on GetLinkStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLinkStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLinkStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLinkStatsRequestMultiError, or nil if none found.
func (m *GetLinkStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLinkStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetShortLinkId()); err != nil {
		err = GetLinkStatsRequestValidationError{
			field:  "ShortLinkId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLinkStatsRequestMultiError(errors)
	}

	return nil
}

func (m *GetLinkStatsRequest) _validateUuid(uuid string) error {
	if matched := _link_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetLinkStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetLinkStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLinkStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLinkStatsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLinkStatsRequestMultiError) AllErrors() []error { return m }

// GetLinkStatsRequestValidationError is the validation error returned by
// GetLinkStatsRequest.Validate if the designated constraints aren't met.
type GetLinkStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLinkStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLinkStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLinkStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLinkStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLinkStatsRequestValidationError) ErrorName() string {
	return "GetLinkStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLinkStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLinkStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLinkStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLinkStatsRequestValidationError{}

// Validate checks the field values on LinkStatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LinkStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkStatsResponseMultiError, or nil if none found.
func (m *LinkStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkStatsResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LinkStatsResponseMultiError(errors)
	}

	return nil
}

// LinkStatsResponseMultiError is an error wrapping multiple validation errors
// returned by LinkStatsResponse.ValidateAll() if the designated constraints
// aren't met.
type LinkStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkStatsResponseMultiError) AllErrors() []error { return m }

// LinkStatsResponseValidationError is the validation error returned by
// LinkStatsResponse.Validate if the designated constraints aren't met.
type LinkStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkStatsResponseValidationError) ErrorName() string {
	return "LinkStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkStatsResponseValidationError{}

// Validate checks the field values on DetailedLinkStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DetailedLinkStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetailedLinkStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetailedLinkStatsMultiError, or nil if none found.
func (m *DetailedLinkStats) ValidateAll() error {
	return m.validate(true)
}

func (m *DetailedLinkStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for UniqueIpCount

	// no validation rules for CountriesCount

	// no validation rules for CountriesStats

	// no validation rules for DailyStats

	if len(errors) > 0 {
		return DetailedLinkStatsMultiError(errors)
	}

	return nil
}

// DetailedLinkStatsMultiError is an error wrapping multiple validation errors
// returned by DetailedLinkStats.ValidateAll() if the designated constraints
// aren't met.
type DetailedLinkStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailedLinkStatsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailedLinkStatsMultiError) AllErrors() []error { return m }

// DetailedLinkStatsValidationError is the validation error returned by
// DetailedLinkStats.Validate if the designated constraints aren't met.
type DetailedLinkStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailedLinkStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailedLinkStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailedLinkStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailedLinkStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailedLinkStatsValidationError) ErrorName() string {
	return "DetailedLinkStatsValidationError"
}

// Error satisfies the builtin error interface
func (e DetailedLinkStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailedLinkStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailedLinkStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailedLinkStatsValidationError{}

// Validate checks the field values on GetLinkClicksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLinkClicksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLinkClicksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLinkClicksRequestMultiError, or nil if none found.
func (m *GetLinkClicksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLinkClicksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetShortLinkId()); err != nil {
		err = GetLinkClicksRequestValidationError{
			field:  "ShortLinkId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLinkClicksRequestMultiError(errors)
	}

	return nil
}

func (m *GetLinkClicksRequest) _validateUuid(uuid string) error {
	if matched := _link_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetLinkClicksRequestMultiError is an error wrapping multiple validation
// errors returned by GetLinkClicksRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLinkClicksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLinkClicksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLinkClicksRequestMultiError) AllErrors() []error { return m }

// GetLinkClicksRequestValidationError is the validation error returned by
// GetLinkClicksRequest.Validate if the designated constraints aren't met.
type GetLinkClicksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLinkClicksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLinkClicksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLinkClicksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLinkClicksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLinkClicksRequestValidationError) ErrorName() string {
	return "GetLinkClicksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLinkClicksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLinkClicksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLinkClicksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLinkClicksRequestValidationError{}

// Validate checks the field values on GetLinkClicksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLinkClicksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLinkClicksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLinkClicksResponseMultiError, or nil if none found.
func (m *GetLinkClicksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLinkClicksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClicks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLinkClicksResponseValidationError{
						field:  fmt.Sprintf("Clicks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLinkClicksResponseValidationError{
						field:  fmt.Sprintf("Clicks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLinkClicksResponseValidationError{
					field:  fmt.Sprintf("Clicks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLinkClicksResponseMultiError(errors)
	}

	return nil
}

// GetLinkClicksResponseMultiError is an error wrapping multiple validation
// errors returned by GetLinkClicksResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLinkClicksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLinkClicksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLinkClicksResponseMultiError) AllErrors() []error { return m }

// GetLinkClicksResponseValidationError is the validation error returned by
// GetLinkClicksResponse.Validate if the designated constraints aren't met.
type GetLinkClicksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLinkClicksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLinkClicksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLinkClicksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLinkClicksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLinkClicksResponseValidationError) ErrorName() string {
	return "GetLinkClicksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLinkClicksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLinkClicksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLinkClicksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLinkClicksResponseValidationError{}

// Validate checks the field values on Click with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Click) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Click with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClickMultiError, or nil if none found.
func (m *Click) ValidateAll() error {
	return m.validate(true)
}

func (m *Click) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ClickValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := ClickValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserAgent()) > 256 {
		err := ClickValidationError{
			field:  "UserAgent",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ClickedAt

	if utf8.RuneCountInString(m.GetCountry()) > 64 {
		err := ClickValidationError{
			field:  "Country",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) > 64 {
		err := ClickValidationError{
			field:  "Region",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClickMultiError(errors)
	}

	return nil
}

func (m *Click) _validateUuid(uuid string) error {
	if matched := _link_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ClickMultiError is an error wrapping multiple validation errors returned by
// Click.ValidateAll() if the designated constraints aren't met.
type ClickMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClickMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClickMultiError) AllErrors() []error { return m }

// ClickValidationError is the validation error returned by Click.Validate if
// the designated constraints aren't met.
type ClickValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClickValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClickValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClickValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClickValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClickValidationError) ErrorName() string { return "ClickValidationError" }

// Error satisfies the builtin error interface
func (e ClickValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClick.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClickValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClickValidationError{}
