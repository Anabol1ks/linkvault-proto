syntax = "proto3";

package link.v1;

option go_package = "github.com/Anabol1ks/linkvault-proto/link/v1;linkv1";

import "validate/validate.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";

service LinkService {
  // Создание короткой ссылки
  rpc CreateShortLink(CreateShortLinkRequest) returns (ShortLinkResponse) {
    option (google.api.http) = {
      post: "/api/v1/links"
      body: "*"
    };
  }

  // Получение короткой ссылки по id
  rpc GetShortLink(GetShortLinkRequest) returns (ShortLinkResponse) {
    option (google.api.http) = {
      get: "/api/v1/links/{id}"
    };
  }

  // Публичный редирект (анонимный) — возвращает оригинальный URL; gateway преобразует в HTTP 302
  rpc RedirectLink(RedirectLinkRequest) returns (RedirectLinkResponse) {
    option (google.api.http) = {
      get: "/r/{short_code}"
    };
  }

  // Удаление короткой ссылки
  rpc DeleteShortLink(DeleteShortLinkRequest) returns (DeleteShortLinkResponse) {
    option (google.api.http) = {
      delete: "/api/v1/links/{id}"
    };
  }

  // Список ссылок текущего пользователя
  rpc ListShortLinks(google.protobuf.Empty) returns (ListShortLinksResponse) {
    option (google.api.http) = {
      get: "/api/v1/links"
    };
  }

  // Статистика по ссылке
  rpc GetLinkStats(GetLinkStatsRequest) returns (LinkStatsResponse) {
    option (google.api.http) = {
      get: "/api/v1/links/{short_link_id}/stats"
    };
  }

  // Сырые клики по ссылке
  rpc GetLinkClicks(GetLinkClicksRequest) returns (GetLinkClicksResponse) {
    option (google.api.http) = {
      get: "/api/v1/links/{short_link_id}/clicks"
    };
  }
}

message CreateShortLinkRequest {
  string original_url = 1 [(validate.rules).string = {uri: true, min_len: 5, max_len: 2048}];
  string expire_after = 2 [(validate.rules).string = {
    pattern: "^[0-9]+[smhdw]$",
    max_len: 16
  }];
}

message ShortLinkResponse {
  string id = 1 [(validate.rules).string = {uuid: true}];
  string short_url = 2 [(validate.rules).string = {uri: true}];
  string original_url = 3 [(validate.rules).string = {uri: true}];
  string short_code = 4 [(validate.rules).string = {min_len: 4, max_len: 32}];
  google.protobuf.StringValue user_id = 5 [(validate.rules).string = {uuid: true}];
  string expire_at = 6;
  bool is_active = 7;
}

message GetShortLinkRequest {
  string id = 1 [(validate.rules).string = {uuid: true}];
}

message RedirectLinkRequest {
  string short_code = 1 [(validate.rules).string = {min_len: 4, max_len: 32}];
}

message RedirectLinkResponse {
  string original_url = 1 [(validate.rules).string = {uri: true}];
}

message DeleteShortLinkRequest {
  string id = 1 [(validate.rules).string = {uuid: true}];
}

message DeleteShortLinkResponse {
  string message = 1 [(validate.rules).string = {max_len: 256}];
}

message ListShortLinksResponse {
  repeated ShortLinkResponse links = 1;
}

message GetLinkStatsRequest {
  string short_link_id = 1 [(validate.rules).string = {uuid: true}];
}

message LinkStatsResponse {
  DetailedLinkStats stats = 1;
}

message DetailedLinkStats {
  int64 total = 1;
  int64 unique_ip_count = 2;
  repeated string unique_ips = 3;
  int32 countries_count = 4;
  repeated string countries = 5;
  map<string, int64> countries_stats = 6;
  map<string, int64> daily_stats = 7;
}

message GetLinkClicksRequest {
  string short_link_id = 1 [(validate.rules).string = {uuid: true}];
}

message GetLinkClicksResponse {
  repeated Click clicks = 1;
}

message Click {
  string id = 1 [(validate.rules).string = {uuid: true}];
  string ip = 2 [(validate.rules).string = {ip: true}];
  string user_agent = 3 [(validate.rules).string = {max_len: 256}];
  string clicked_at = 4;
  string country = 5 [(validate.rules).string = {max_len: 64}];
  string region = 6 [(validate.rules).string = {max_len: 64}];
}